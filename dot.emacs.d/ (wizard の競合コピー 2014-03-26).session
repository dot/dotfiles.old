;;; Automatically generated on Wed Mar 26 09:38:01 2014
;;; Invoked by kondo@wizard.local using 24.3.1
(setq-default kill-ring '("show_fields_with_radio" "(defadvice helm-ff-kill-or-find-buffer-fname (around execute-only-if-exist activate)
  \"Execute command only if CANDIDATE exists\"
  (when (file-exists-p candidate)
    ad-do-it))" #(";; For find-file etc." 0 3 (face font-lock-comment-delimiter-face fontified t) 3 21 (face font-lock-comment-face fontified t)) #(";; For helm-find-files etc." 0 3 (face font-lock-comment-delimiter-face fontified t) 3 27 (face font-lock-comment-face fontified t)) ";; For find-file etc.
(define-key helm-read-file-map (kbd \"TAB\") 'helm-execute-persistent-action)
;; For helm-find-files etc.
(define-key helm-find-files-map (kbd \"TAB\") 'helm-execute-persistent-action)" ";; Emulate `kill-line' in helm minibuffer
(setq helm-delete-minibuffer-contents-from-point t)
(defadvice helm-delete-minibuffer-contents (before helm-emulate-kill-line activate)
  \"Emulate `kill-line' in helm minibuffer\"
  (kill-new (buffer-substring (point) (field-end))))" #("(define-key helm-map (kbd \"C-h\") 'delete-backward-char)
" 0 26 (fontified t) 26 31 (face font-lock-string-face fontified t) 31 56 (fontified t)) "(define-key helm-map (kbd \"C-h\") 'delete-backward-char)
(define-key helm-find-files-map (kbd \"C-h\") 'delete-backward-char)"))
(setq-default session-file-alist '(("~/Dropbox/dotfiles/dot.emacs.d/init.el" 6378 6379 1 nil nil 6378 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/org-20140324/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/git-gutter-20140322.812/git-gutter-autoloads.el" 2267 nil 1 nil nil 2267 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-20140323.1210/helm-autoloads.el" 44494 nil 1 nil nil 44494 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-gtags-20140320.232/helm-gtags-autoloads.el" 2785 nil 1 nil nil 2785 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/org-20140324/org-autoloads.el" 27156 nil 1 nil nil 27156 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/web-mode-20140323.1220/web-mode-autoloads.el" 447 nil 1 nil nil 447 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/members/index.haml" 105 105 1 nil nil 544 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/index.haml" 105 44 1 nil nil 121 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/assets/stylesheets/application.scss" 1234 1191 1 nil nil 1236 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/members/committee.haml" 520 1299 1 nil nil 809 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/helpers/application_helper.rb" 319 301 1 nil nil 319 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/partials/_sidebar.haml" 645 345 1 nil nil 645 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/members/terms.haml" 82 135 1 nil nil 84 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/members/conference.haml" 20 1 1 nil nil 20 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/supporters.haml" 409 1 1 nil nil 19 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/privacy.haml" 22 412 1 nil nil 22 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/recruit.haml" 16 406 1 nil nil 16 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/trial_information.haml" 21 411 1 nil nil 21 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/record.haml" 16 406 1 nil nil 16 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/contract.haml" 14 404 1 nil nil 14 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/organization.haml" 16 406 1 nil nil 16 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/purpose.haml" 17 407 1 nil nil 17 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/greeting.haml" 407 1 1 nil nil 134 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/layouts/layout.haml" 1074 1 1 nil nil 1254 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/config.rb" 1557 419 1 nil nil 1557 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/partials/_header.haml" 257 393 1 nil nil 257 (overwrite-mode)) ("~/Downloads/69873.html" 6308 12858 1 nil nil 959 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/assets/stylesheets/_settings.scss" 161 143 1 nil nil 161 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/partials/_fonts.haml" 202 108 1 nil nil 202 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/assets/stylesheets/_imports.scss" 88 88 1 nil nil 88 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/bower.json" 87 87 1 nil nil 87 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/helpers/meta_helper.rb" 162 138 1 nil nil 159 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/partials/_footer.haml" 43 nil 1 nil nil 43 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/Gemfile" 232 nil 1 nil nil 232 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/source/assets/javascripts/application.coffee" 55 nil 1 nil nil 55 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.tmux.conf" 466 nil 1 nil nil 466 (overwrite-mode)) ("~/Dropbox/jccg/jccg.com/.bowerrc" 74 1 1 nil nil 74 (overwrite-mode)) ("~/Downloads/pure-layout-side-menu/index.html" 1473 1203 1 nil nil 4007 (overwrite-mode)) ("~/projects/oscr-ptosh/Gemfile" 158 150 1 nil nil 158 (overwrite-mode)) ("~/projects/oscr-ptosh/spec/support/autocomplete_helper.rb" 225 225 1 nil nil 225 (overwrite-mode)) ("~/projects/oscr-ptosh/app/controllers/departments_controller.rb" 1874 1048 1 nil nil 1874 (overwrite-mode)) ("~/projects/oscr-ptosh/app/views/welcome/admin_welcome.html.haml" 2174 615 1 nil nil 615 (overwrite-mode)) ("~/projects/oscr-ptosh/spec/features/kase_entry_spec.rb" 2759 1 1 nil nil 2759 (overwrite-mode)) ("~/Dropbox/howm/2014/03/2014-03-19-134921.txt" 412 81 1 nil nil 312 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-20140317.326/helm-autoloads.el" 44536 nil 1 nil nil 44536 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/web-mode-20140317.1340/web-mode-autoloads.el" 449 nil 1 nil nil 449 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/spacegray-theme-20131230.1127/spacegray-theme-autoloads.el" 487 nil 1 nil nil 487 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/org-20140317/org-loaddefs.el" 86900 nil 1 nil nil 86900 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-20140315.28/helm-autoloads.el" 44536 nil 1 nil nil 44536 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-gtags-20140311.2224/helm-gtags-autoloads.el" 2787 nil 1 nil nil 2787 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/org-20140317/org-autoloads.el" 27164 nil 1 nil nil 27164 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/web-mode-20140315.41/web-mode-autoloads.el" 449 nil 1 nil nil 449 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/yasnippet-20140314.255/yasnippet-autoloads.el" 1479 nil 1 nil nil 1479 (overwrite-mode)) ("~/Dropbox/howm/2014/03/2014-03-13-140136.txt" 237 418 1 nil nil 682 (overwrite-mode)) ("~/projects/oscr-ptosh/app/controllers/sheets_controller.rb" 7508 1 1 nil nil 7508 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/coffee-mode-20140308.529/coffee-mode-autoloads.el" 664 nil 1 nil nil 664 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-20140309.505/helm-autoloads.el" 44931 nil 1 nil nil 44931 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-ag-20140307.1558/helm-ag-autoloads.el" 585 nil 1 nil nil 585 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-gtags-20140307.1639/helm-gtags-autoloads.el" 2672 nil 1 nil nil 2672 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/inf-ruby-20140306.1941/inf-ruby-autoloads.el" 2692 nil 1 nil nil 2692 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/popwin-20140309.745/popwin-autoloads.el" 2520 nil 1 nil nil 2520 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/web-mode-20140309.1501/web-mode-autoloads.el" 449 nil 1 nil nil 449 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/yasnippet-20140306.5/yasnippet-autoloads.el" 1478 nil 1 nil nil 1478 (overwrite-mode)) ("~/projects/oscr-ptosh/app/models/completed_sheet.rb" 2 25 1 nil nil 2 (overwrite-mode)) ("~/projects/oscr-ptosh/script/update_mongo.sh" 790 583 1 nil nil 790 (overwrite-mode)) ("~/projects/oscr-ptosh/script/com.ptosh.backup.plist" 552 1 1 nil nil 543 (overwrite-mode)) ("~/projects/oscr-ptosh/script/com.ptosh.download.plist" 466 nil 1 nil nil 466 (overwrite-mode)) ("~/projects/oscr-ptosh/config/initializers/mailer.rb" 469 1934 1 nil nil 469 (overwrite-mode)) ("~/Dropbox/howm/2014/03/2014-03-05-130807.txt" 78 65 1 nil nil 55 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/helm-20140303.2232/helm-autoloads.el" 44933 nil 1 nil nil 44933 (overwrite-mode)) ("~/Dropbox/dotfiles/dot.emacs.d/elpa/web-mode-20140304.1651/web-mode-autoloads.el" 449 nil 1 nil nil 449 (overwrite-mode))))
(setq-default file-name-history '("~/projects/oscr-ptosh/app/models/odm_action_import.rb" "~/projects/oscr-ptosh/app/assets/javascripts/sheet_script.js" "~/projects/oscr-ptosh/app/controllers/completed_sheets_controller.rb" "~/projects/oscr-ptosh/app/controllers/completed_sheets_crud.rb" "~/projects/tdoch/app/models/user.rb" "~/Dropbox/dotfiles/dot.emacs.d/init.el" "~/Dropbox/howm/0000-00-00-000000.howm" "~/.howm-keys" "~/Dropbox/dotfiles/dot.emacs.d/inita" "~/.emacs.d/elpa/git-gutter-20140322.812/git-gutter-autoloads.el" "~/.emacs.d/elpa/helm-20140323.1210/helm-autoloads.el" "~/.emacs.d/elpa/helm-gtags-20140320.232/helm-gtags-autoloads.el" "~/.emacs.d/elpa/org-20140324/org-loaddefs.el" "~/.emacs.d/elpa/org-20140324/org-autoloads.el" "~/.emacs.d/elpa/web-mode-20140323.1220/web-mode-autoloads.el" "~/projects/oscr-ptosh/app/views/sheets/_script.js.haml" "~/projects/oscr-ptosh/app/controllers/sheets_controller.rb" "~/Dropbox/jccg/jccg.com/source/members/index.haml" "~/Dropbox/jccg/jccg.com/source/assets/stylesheets/application.scss" "~/Dropbox/jccg/jccg.com/source/members/terms.haml" "~/Dropbox/jccg/jccg.com/source/members/conference.haml" "~/Dropbox/jccg/jccg.com/source/members/committee.haml" "~/Dropbox/jccg/jccg.com/source/privacy.haml" "~/Dropbox/jccg/jccg.com/source/recruit.haml" "~/Dropbox/jccg/jccg.com/source/supporters.haml" "~/Dropbox/jccg/jccg.com/source/trial_information.haml" "~/Dropbox/jccg/jccg.com/source/record.haml" "~/Dropbox/jccg/jccg.com/source/contract.haml" "~/Dropbox/jccg/jccg.com/source/organization.haml" "~/Dropbox/jccg/jccg.com/source/purpose.haml" "~/Dropbox/jccg/jccg.com/source/pur"))
(setq-default search-ring '("effect_fields_with_radio" "helm" "helm-find" "kill" "delete" "javascript" "title" "drop" "brand" "panel" "pan" "caret" "high" "hi" "dropdown-menu" "body"))
(setq-default anything-c-source-complete-shell-history '((name . "Shell History") (init lambda nil (require (quote shell-history)) (with-current-buffer (anything-candidate-buffer (shell-history-buffer)) (revert-buffer t t) (set (make-local-variable (quote zsh-p)) (shell-history-zsh-extended-history-p)))) (get-line . acsh-get-line) (search-from-end) (type . complete)))
(setq-default anything-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default anything-c-source-eshell-history '((name . "Eshell history") (init lambda nil (let (eshell-hist-ignoredups) (eshell-write-history eshell-history-file-name t) (with-current-buffer (anything-candidate-buffer (quote global)) (insert-file-contents eshell-history-file-name))) (remove-hook (quote minibuffer-setup-hook) (quote eshell-mode))) (candidates-in-buffer) (keymap keymap (27 keymap (112 . anything-next-line)) keymap (23 . anything-yank-text-at-point) (24 keymap (6 . anything-quit-and-find-file)) (help keymap (109 . anything-help)) (8 keymap (109 . anything-help)) (f1 keymap (109 . anything-help)) (3 keymap (24 keymap (2 . anything-send-bug-report-from-anything) (13 . anything-display-all-visible-marks) (4 . anything-debug-output)) (21 . anything-force-update) (6 . anything-follow-mode) (11 . anything-kill-selection-and-quit) (25 . anything-yank-selection) (4 . anything-delete-current-selection)) (67108987 . anything-enlarge-window) (67108989 . anything-narrow-window) (20 . anything-toggle-resplit-window) (18 . undefined) (11 . anything-delete-minibuffer-contents) (67108896 . anything-toggle-visible-mark) (C-M-up . anything-scroll-other-window-down) (C-M-down . anything-scroll-other-window) (M-prior . anything-scroll-other-window-down) (M-next . anything-scroll-other-window) (15 . anything-next-source) (5 . anything-select-2nd-action-or-end-of-line) (26 . anything-execute-persistent-action) (90 . anything-select-with-digit-shortcut) (89 . anything-select-with-digit-shortcut) (88 . anything-select-with-digit-shortcut) (87 . anything-select-with-digit-shortcut) (86 . anything-select-with-digit-shortcut) (85 . anything-select-with-digit-shortcut) (84 . anything-select-with-digit-shortcut) (83 . anything-select-with-digit-shortcut) (82 . anything-select-with-digit-shortcut) (81 . anything-select-with-digit-shortcut) (80 . anything-select-with-digit-shortcut) (79 . anything-select-with-digit-shortcut) (78 . anything-select-with-digit-shortcut) (77 . anything-select-with-digit-shortcut) (76 . anything-select-with-digit-shortcut) (75 . anything-select-with-digit-shortcut) (74 . anything-select-with-digit-shortcut) (73 . anything-select-with-digit-shortcut) (72 . anything-select-with-digit-shortcut) (71 . anything-select-with-digit-shortcut) (70 . anything-select-with-digit-shortcut) (69 . anything-select-with-digit-shortcut) (68 . anything-select-with-digit-shortcut) (67 . anything-select-with-digit-shortcut) (66 . anything-select-with-digit-shortcut) (65 . anything-select-with-digit-shortcut) (67108921 . anything-select-with-digit-shortcut) (67108920 . anything-select-with-digit-shortcut) (67108919 . anything-select-with-digit-shortcut) (67108918 . anything-select-with-digit-shortcut) (67108917 . anything-select-with-digit-shortcut) (67108916 . anything-select-with-digit-shortcut) (67108915 . anything-select-with-digit-shortcut) (67108914 . anything-select-with-digit-shortcut) (67108913 . anything-select-with-digit-shortcut) (left . anything-previous-source) (right . anything-next-source) (22 . anything-next-page) (16 . anything-previous-line) (14 . anything-next-line) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . anything-help))) (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . anything-select-3rd-action) (13 . anything-exit-minibuffer) (7 . anything-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . anything-select-action) (up . anything-previous-line) (prior . anything-previous-page) (down . anything-next-line) (next . anything-next-page) (27 keymap (16 . anything-previous-source) (14 . anything-next-source) (109 . anything-toggle-all-marks) (93 . anything-next-visible-mark) (91 . anything-prev-visible-mark) (32 . anything-toggle-visible-mark) (33554454 . anything-scroll-other-window-down) (25 . anything-scroll-other-window-down) (22 . anything-scroll-other-window) (62 . anything-end-of-buffer) (60 . anything-beginning-of-buffer) (118 . anything-previous-page) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (filtered-candidate-transformer lambda (candidates sources) (reverse candidates)) (candidate-number-limit . 9999) (action lambda (candidate) (eshell-kill-input) (insert candidate))))
(setq-default anything-c-source-extended-command-history '((name . "Emacs Commands History") (candidates lambda nil (anything-fast-remove-dups extended-command-history :test (quote equal))) (type . command)))
(setq-default anything-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (match anything-c-match-on-basename) (type . file)))
(setq-default anything-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . anything-c-source-global-mark-ring-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (anything-c-switch-to-buffer (second items)) (anything-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (anything-c-switch-to-buffer (second items)) (anything-goto-line (string-to-number (car items))) (anything-match-line-color-current-line))) (persistent-help . "Show this line")))
(setq-default anything-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (anything-attrset (quote last-command) last-command)) (candidates . anything-c-kill-ring-candidates) (filtered-candidate-transformer anything-c-kill-ring-transformer) (action . anything-c-kill-ring-action) (keymap keymap (27 keymap (117 . anything-previous-line) (121 . anything-next-line)) keymap (23 . anything-yank-text-at-point) (24 keymap (6 . anything-quit-and-find-file)) (help keymap (109 . anything-help)) (8 keymap (109 . anything-help)) (f1 keymap (109 . anything-help)) (3 keymap (24 keymap (2 . anything-send-bug-report-from-anything) (13 . anything-display-all-visible-marks) (4 . anything-debug-output)) (21 . anything-force-update) (6 . anything-follow-mode) (11 . anything-kill-selection-and-quit) (25 . anything-yank-selection) (4 . anything-delete-current-selection)) (67108987 . anything-enlarge-window) (67108989 . anything-narrow-window) (20 . anything-toggle-resplit-window) (18 . undefined) (11 . anything-delete-minibuffer-contents) (67108896 . anything-toggle-visible-mark) (C-M-up . anything-scroll-other-window-down) (C-M-down . anything-scroll-other-window) (M-prior . anything-scroll-other-window-down) (M-next . anything-scroll-other-window) (15 . anything-next-source) (5 . anything-select-2nd-action-or-end-of-line) (26 . anything-execute-persistent-action) (90 . anything-select-with-digit-shortcut) (89 . anything-select-with-digit-shortcut) (88 . anything-select-with-digit-shortcut) (87 . anything-select-with-digit-shortcut) (86 . anything-select-with-digit-shortcut) (85 . anything-select-with-digit-shortcut) (84 . anything-select-with-digit-shortcut) (83 . anything-select-with-digit-shortcut) (82 . anything-select-with-digit-shortcut) (81 . anything-select-with-digit-shortcut) (80 . anything-select-with-digit-shortcut) (79 . anything-select-with-digit-shortcut) (78 . anything-select-with-digit-shortcut) (77 . anything-select-with-digit-shortcut) (76 . anything-select-with-digit-shortcut) (75 . anything-select-with-digit-shortcut) (74 . anything-select-with-digit-shortcut) (73 . anything-select-with-digit-shortcut) (72 . anything-select-with-digit-shortcut) (71 . anything-select-with-digit-shortcut) (70 . anything-select-with-digit-shortcut) (69 . anything-select-with-digit-shortcut) (68 . anything-select-with-digit-shortcut) (67 . anything-select-with-digit-shortcut) (66 . anything-select-with-digit-shortcut) (65 . anything-select-with-digit-shortcut) (67108921 . anything-select-with-digit-shortcut) (67108920 . anything-select-with-digit-shortcut) (67108919 . anything-select-with-digit-shortcut) (67108918 . anything-select-with-digit-shortcut) (67108917 . anything-select-with-digit-shortcut) (67108916 . anything-select-with-digit-shortcut) (67108915 . anything-select-with-digit-shortcut) (67108914 . anything-select-with-digit-shortcut) (67108913 . anything-select-with-digit-shortcut) (left . anything-previous-source) (right . anything-next-source) (22 . anything-next-page) (16 . anything-previous-line) (14 . anything-next-line) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . anything-help))) (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . anything-select-3rd-action) (13 . anything-exit-minibuffer) (7 . anything-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . anything-select-action) (up . anything-previous-line) (prior . anything-previous-page) (down . anything-next-line) (next . anything-next-page) (27 keymap (16 . anything-previous-source) (14 . anything-next-source) (109 . anything-toggle-all-marks) (93 . anything-next-visible-mark) (91 . anything-prev-visible-mark) (32 . anything-toggle-visible-mark) (33554454 . anything-scroll-other-window-down) (25 . anything-scroll-other-window-down) (22 . anything-scroll-other-window) (62 . anything-end-of-buffer) (60 . anything-beginning-of-buffer) (118 . anything-previous-page) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . delete-backward-char) (migemo) (multiline)))
(setq-default anything-c-source-mark-ring '((name . "mark-ring") (init lambda nil (setq anything-mark-ring-cache (ignore-errors (anything-c-source-mark-ring-candidates)))) (candidates lambda nil (anything-aif anything-mark-ring-cache it)) (action ("Goto line" lambda (candidate) (anything-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (anything-goto-line (string-to-number candidate)) (anything-match-line-color-current-line)) (persistent-help . "Show this line")))
(setq-default anything-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default anything-c-source-projects-history '((name . "Projects history") (candidates lambda nil ap:history) (action ("anything project" lambda (c) (flet ((buffer-file-name nil nil)) (let ((default-directory c)) (call-interactively (quote anything-project))))))))
(setq-default buffer-name-history '("font-awesome.css" "index.html" "*Packages*" "mail_ja.rb" "*scratch*" "agtzaW1wbGUtbm90ZXIqCxIETm90ZSIgZDBiMjZmYzEyYWQzNGFmOTk2M2NkYjM5MjdlOGZiMDMM" "検査結果サンプル.json" "item_reader.rb" "seeds.rb" "municipalities.csv" "municipalies.csv" "municipalities.csv<2>" "development.log" "lb.csv" "fac" "controllers" "trials.rb" "show.html.haml" "mongoid.yml" "newrelic.yml<3>" "user.rb" "capybara-201312192253518907028076.html" "License Key.txt" "routes.rb" "_signiture_dialog.html.haml" "passwords_controller.rb" "application.css.sass" "destroy_invoice.feature" "*Finder*" "web_steps.rb"))
(setq-default command-history '((helm-ag-this-file) (execute-extended-command nil "helm-ag-this-file") (helm-ag) (execute-extended-command nil "helm-ag") (find-file "/Users/kondo/projects/oscr-ptosh/app" t) (find-file "/Users/kondo/projects/oscr-ptosh/app/controllers/completed_sheets_controller.rb" t) (find-file "/Users/kondo/projects/oscr-ptosh" t) (find-file "/Users/kondo/Dropbox/dotfiles/dot.emacs.d/" t) (list-packages nil) (execute-extended-command nil "list-packages") (find-file "/Users/kondo/projects/oscr-ptosh/app/views/sheets/_script.js.haml" t) (find-file "/Users/kondo/projects/oscr-ptosh/app/controllers/sheets_controller.rb" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/members/index.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/members/terms.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/members/conference.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/members/committee.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/privacy.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/recruit.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/supporters.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/trial_information.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/record.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/contract.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/organization.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/purpose.haml" t) (find-alternate-file "/Users/kondo/Dropbox/jccg/jccg.com/source/index.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/index.haml" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/greeting.haml" t) (find-alternate-file "/Users/kondo/Dropbox/jccg/jccg.com/source/layouts" t) (find-file "/Users/kondo/Dropbox/jccg/jccg.com/source/layouts" t)))
(setq-default extended-command-history '("helm-ag-this-file" "helm-ag" "list-packages" "howm-create" "replace-regexp" "simplenote-sync-notes" "simplenote-browse" "howm-menu" "describe-key" "eval-region" "describe-bindings" "indent-region" "list-processes" "finder-by-keyword" "align-regexp" "indent-relative-maybe" "howm-create-interactively" "browse-url" "browse-url-chromium" "browse-url-xdg-open" "indent-relative" "query-replace" "server-start" "erc-nickserv-identify" "org-mode" "howm-mode" "make-directory" "Command attempted to use minibuffer while in minibuffer" "yas-visit-snippet-file"))
(setq-default helm-ag-command-history '("ag --nocolor --nogroup effect_fields_with_" "ag --nocolor --nogroup show_fields_with_radio"))
(setq-default helm-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-c-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (second items)) (helm-goto-line (string-to-number (car items))) (helm-match-line-color-current-line))) (persistent-help . "Show this line")))
(setq-default helm-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 keymap (104 . undefined) (8 . undefined) (4 . helm-debug-output)) (20 lambda (&rest --cl-rest--) (interactive) (apply (quote #[(G46521 G46522 G46523) "\303J	J
J#\207" [G46523 G46522 G46521 helm-run-multi-key-command] 4]) (quote --timeout--) (quote --iter--) (quote --funs--) --cl-rest--)) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (18 . helm-minibuffer-history) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-c-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)) (push-mark nil (quote nomsg)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-match-line-color-current-line)) (persistent-help . "Show this line")))
(setq-default helm-ff-history '("/Users/kondo/projects/oscr-ptosh/app/assets/javascripts/" "/Users/kondo/projects/oscr-ptosh/" "/Users/kondo/projects/oscr-ptosh/app/controllers/" "/Users/kondo/Dropbox/howm/" "/Users/kondo/Dropbox/dotfiles/dot.emacs.d/" "/" "/Users/kondo/projects/oscr-ptosh/app/views/sheets/" "/Users/kondo/Dropbox/jccg/jccg.com/source/members/" "/Users/kondo/Dropbox/jccg/jccg.com/source/" "/Users/kondo/Dropbox/jccg/jccg.com/source/layouts/" "/Users/kondo/Dropbox/jccg/jccg.com/source/partials/" "/Users/kondo/Dropbox/jccg/jccg.com/source/assets/stylesheets/" "/Users/kondo/Dropbox/jccg/jccg.com/" "/Users/kondo/Dropbox/jccg/jccg.com/helpers/" "/Users/kondo/Downloads/" "/Users/kondo/Dropbox/jccg/jccg.com/source/assets/" "/Users/kondo/Dropbox/jccg/jccg.com/components/bootflatv2/bootflat/scss/bootflat/" "/Users/kondo/Dropbox/jccg/jccg.com/source/assets/javascripts/" "/Users/kondo/Dropbox/jccg/_jccg.com/source/" "/Users/kondo/Dropbox/dotfiles/" "/Users/kondo/projects/oscr-ptosh/app/models/" "/Users/kondo/Dropbox/jccg/jccg.com/source/javascripts/" "/Users/kondo/Downloads/bootflat.github.io-master/css/" "/Users/kondo/Dropbox/jccg/jccg.com/source/stylesheets/" "/Users/kondo/Downloads/pure-layout-side-menu/" "/Users/kondo/projects/oscr-ptosh/app/views/welcome/" "/Users/kondo/projects/oscr-ptosh/app/views/" "/Users/kondo/projects/oscr-ptosh/app/views/layouts/" "/Users/kondo/projects/oscr-ptosh/app/" "/Users/kondo/projects/oscr-ptosh/app/assets/stylesheets/" "/Users/kondo/projects/oscr-ptosh/spec/features/" "/Users/kondo/projects/oscr-ptosh/spec/support/" "/Users/kondo/projects/oscr-ptosh/app/mailers/" "/Users/kondo/projects/oscr-ptosh/lib/tasks/" "/Users/kondo/projects/oscr-ptosh/app/views/kases/" "/Users/kondo/projects/oscr-ptosh/config/initializers/" "/Users/kondo/projects/oscr-ptosh/app/views/notifier/" "/Users/shuhei/projects/oscr-ptosh/app/models/" "/Users/shuhei/projects/oscr-ptosh/" "/Users/shuhei/projects/oscr-ptosh/app/controllers/" "/Users/shuhei/projects/oscr-ptosh/app/" "/Users/shuhei/projects/oscr-ptosh/script/" "/Users/shuhei/projects/oscr-ptosh/config/" "/Users/kondo/"))
(setq-default helm-file-name-history '("sheets" "trial.rb" "collection_spec.rb" "cursor_spec.rb" "retry.rb" "mongo.rb" "cursor.rb" "collection.rb" "seeds.rb" "database.rake" "development.rb" "mongoid.rb" "_inquiry_list_row.html.haml" "communication.csv" "_available_sheets.html.haml" "exam_results_controller.rb" "user.rb" "completed_sheet.rb" "patient.rb" "communication.rb" "sheet.rb" "trials_controller.rb" "completed_sheet_spec.rb" "central_lab_kases_spec.rb" "_user_selector.html.haml" "Gemfile" "admissions_controller_spec.rb" "helm-autoloads.el" "inf-ruby-autoloads.el" "slim-mode-autoloads.el" "admission_contexts.rb" "web_steps.rb"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default helm-source-ff-file-name-history '((name . "File name history") (init lambda nil (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1)))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (type . file)))
(setq-default helm-source-global-mark-ring '((name . "global-mark-ring") (candidates . helm-global-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (second items)) (helm-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (helm-switch-to-buffer (second items)) (helm-goto-line (string-to-number (car items))) (helm-match-line-color-current-line))) (persistent-help . "Show this line")))
(setq-default helm-source-kill-ring '((name . "Kill Ring") (init lambda nil (helm-attrset (quote last-command) last-command)) (candidates . helm-kill-ring-candidates) (filtered-candidate-transformer helm-kill-ring-transformer) (action ("Yank" . helm-kill-ring-action) ("Delete" lambda (candidate) (loop for cand in (helm-marked-candidates) do (setq kill-ring (delete cand kill-ring))))) (keymap keymap (27 keymap (117 . helm-previous-line) (121 . helm-next-line)) keymap (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (f1 keymap (109 . helm-help)) (8 keymap (104 . undefined) (8 . undefined) (4 . helm-debug-output)) (20 lambda (&rest --cl-rest--) (interactive) (apply (quote #[(G46521 G46522 G46523) "\303J	J
J#\207" [G46523 G46522 G46521 helm-run-multi-key-command] 4]) (quote --timeout--) (quote --iter--) (quote --funs--) --cl-rest--)) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (21 . helm-force-update) (6 . helm-follow-mode) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (4 . helm-delete-current-selection) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (18 . undefined) (23 . helm-yank-text-at-point) (24 keymap (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (15 . helm-next-source) (10 . helm-select-3rd-action) (5 . helm-select-2nd-action-or-end-of-line) (26 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-exit-minibuffer) (left . helm-previous-source) (right . helm-next-source) (7 . helm-keyboard-quit) (22 . helm-next-page) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-in-this-source-only) (109 . helm-toggle-all-marks) (93 . helm-next-visible-mark) (91 . helm-prev-visible-mark) (32 . helm-toggle-visible-mark) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-previous-page)) (next . helm-next-page) (prior . helm-previous-page) (16 . helm-previous-line) (14 . helm-next-line) (up . helm-previous-line) (down . helm-next-line) keymap (18 . helm-minibuffer-history) (menu-bar keymap (minibuf #1="Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") #1#)) (10 . exit-minibuffer) (13 . exit-minibuffer) (7 . abort-recursive-edit) (C-tab . file-cache-minibuffer-complete) (9 . self-insert-command) (XF86Back . previous-history-element) (up . previous-history-element) (prior . previous-history-element) (XF86Forward . next-history-element) (down . next-history-element) (next . next-history-element) (27 keymap (63 . session-minibuffer-history-help) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default helm-source-mark-ring '((name . "mark-ring") (candidates . helm-mark-ring-get-candidates) (action ("Goto line" lambda (candidate) (helm-goto-line (string-to-number candidate)) (push-mark nil (quote nomsg)))) (persistent-action lambda (candidate) (helm-goto-line (string-to-number candidate)) (helm-match-line-color-current-line)) (persistent-help . "Show this line")))
(setq-default minibuffer-history '(#("assets" 0 6 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t face dired-directory)) "/Users/kondo/projects/oscr-ptosh/" "/Users/kondo/projects/oscr-ptosh/app/controllers/completed_sheets_controller.rb" "user.rb" "ini" "/Users/kondo/Dropbox/dotfiles/dot.emacs.d/" "init.el" "/Users/kondo/projects/oscr-ptosh/app/views/sheets/s" "/Users/kondo/projects/oscr-ptosh/app/controllers/sheets_controller.rb" #("panel-default" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t)) "/Users/kondo/Dropbox/jccg/jccg.com/source/members/index.haml" #("row" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t)) "inde" #("2" 0 1 (fontified t)) "appli" "com" #("first" 0 4 (fontified t) 4 5 (rear-nonsticky t fontified t)) "/Users/kondo/Dropbox/jccg/jccg.com/source/members/terms.haml" #("committee" 0 8 (fontified nil) 8 9 (rear-nonsticky t fontified nil)) "/Users/kondo/Dropbox/jccg/jccg.com/source/members/conference.haml" #("/members/terms" 0 1 (fontified t) 1 14 (fontified t)) #("設立準備委員会" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) "/Users/kondo/Dropbox/jccg/jccg.com/source/members/" "/Users/kondo/Dropbox/jccg/jccg.com/source/members/committee.haml" "_si" "ind" "/Users/kondo/Dropbox/jccg/jccg.com/source/privacy.haml" "/Users/kondo/Dropbox/jccg/jccg.com/source/recruit.haml" "/Users/kondo/Dropbox/jccg/jccg.com/source/supporters.haml"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("|" "^" "!" "	" "-" "," " " "-
" "
" "https://www.pivotaltracker.com/story/show/" "* [" "[" "]
" "[#" "#" "'create'" "'update'" "" ";" "- https://www.pivotaltracker.com/story/show/" "* " "index.php%3F" "index.php?" "has"))
(setq-default regexp-history '("effect" "effec" "effe" "eff" "legacy_loose_o" "unpa" "unp" "pry" "pryl" "pryle" "unpack" "unpac" "require" "helm-c-moccur-higligt-info-line-flagkill" "helm-c-moccur-higligt-info-line-flagkil" "helm-c-moccur-higligt-info-line-flagki" "helm-c-moccur-higligt-info-line-flagk" "helm-c-moccur-higligt-info-line-flag" "helm" "hel"))
(setq-default string-rectangle-history '("- #" "* " "-"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default yes-or-no-p-history '("yes" "no" "ye" "ywa" "87" "y"))
