;;; anything-include.el

;;; License:
;; This is free software

;;; Commentary:
;;
;; For C and C++.
;;
;; Anything-source made maintenance of history of #include and reusable. 
;;
;; Can it be recorded that #include <..> and #include ".." is copied or is killed in the variable for the history,
;; and input the supplementation by way of anything. 
;;
;; Even if the session cuts, it is reusable because the history is preserved in the file of ~/.anything-include. 
;;

;;; How to use:
;;
;; 1. Please add the following descriptions to emacs. 
;;
;; (require 'anything-include)
;;
;; 2. Please add 'anything-c-source-include' to anything-source.
;;
;; (setq anything-sources
;;       (list anything-c-source-buffers
;; 	    anything-c-source-files-in-current-dir
;;	    anything-c-source-recentf
;;	    anything-c-source-emacs-commands
;;	    anything-c-source-info-pages
;;	    anything-c-source-include
;;	    ))
;;
;; 3. Please customize the following variables if it is necessary. 
;;
;; (setq anything-include-save-file "~/.anything-include")
;; (setq anything-include-max-saved-items 100)
;;

(defvar anything-include-list nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; anything-source (please add 'anything-sources)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar anything-c-source-include
  '((name . "#include")
    (candidates . anything-include-list)
    (action . anything-include-insert))
  "")

(defun anything-include-insert (c)
  (insert (concat c "\n"))
  (push c anything-include-list))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; customize variable
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar anything-include-save-file "~/.anything-include"
  "*File to save the anything-include list into.")

(defvar anything-include-max-saved-items 100
  "*Maximum number of items of the #include list that will be saved.
A nil value means to save the whole list.
See the command `anything-include-save-list'.")

(defconst anything-include-save-file-header
  ";;; Automatically generated by `anything-include' on %s.\n"
  "Header to be written into the `anything-include-save-file'.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; advice
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defadvice kill-new (before anything-include-add-list (string &optional replace yank-handler))
  (let ((str (copy-sequence string)))
    (set-text-properties 0 (length str) nil str)
    (let ((string-list (split-string str "\n")))
      (while string-list
	(let ((s (car string-list)))
	  (if (string-match "^#include" s)
	      (push s anything-include-list)))
	(setq string-list (cdr string-list))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; save
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsubst anything-include-trunc-list (l n)
  "Return from L the list of its first N elements."
  (let (nl)
    (while (and l (> n 0))
      (setq nl (cons (car l) nl)
            n  (1- n)
            l  (cdr l)))
    (nreverse nl)))

(defun anything-include-dump-variable (variable &optional limit)
  "Insert a \"(setq VARIABLE value)\" in the current buffer.
When the value of VARIABLE is a list, optional argument LIMIT
specifies a maximum number of elements to insert.  By default insert
the full list."
  (let ((value (symbol-value variable)))
    (if (atom value)
        (insert (format "\n(setq %S '%S)\n" variable value))
      (when (and (integerp limit) (> limit 0))
        (setq value (anything-include-trunc-list value limit)))
      (insert (format "\n(setq %S\n      '(" variable))
      (dolist (e value)
        (insert (format "\n        %S" e)))
      (insert "\n        ))\n"))))

(defun anything-include-save-list ()
  "Save the include list.
Write data into the file specified by `anything-include-save-file'."
  (interactive)
  (condition-case error
      (with-temp-buffer
        (erase-buffer)
        (insert (format anything-include-save-file-header (current-time-string)))
        (anything-include-dump-variable 'anything-include-list anything-include-max-saved-items)
        (insert "\n \n;;; Local Variables:\n"
                ";;; End:\n")
        (write-file (expand-file-name anything-include-save-file))
        nil)
    (error
     (warn "anything-include mode: %s" (error-message-string error)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; load
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun anything-include-load-list ()
  "Load a previously saved recent list.
Read data from the file specified by `anything-include-save-file'."
  (interactive)
  (let ((file (expand-file-name anything-include-save-file)))
    (when (file-readable-p file)
      (load-file file))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; initialize
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(anything-include-load-list)
(ad-activate 'kill-new)
(add-hook 'kill-emacs-hook 'anything-include-save-list)

(provide 'anything-include)

;;; anything-include.el ends here.
